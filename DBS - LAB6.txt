Lab 06 Ð Transactions and SecurityObjectives:The purpose of this lab is to introduce the student to both transactions and security.  In the real-world, databases tasks often involve multiple steps and if any step in the middle fails, the procedure is a failure.  This lap walks the student through a couple transactions and lets them learn how various steps have varying consequences that they need to be aware of.By the end of this lab, the student will be able to:* Describe the steps of a transaction, how a transaction begins and ends and walk through live scenarios of a variety of transactions* Understand and act appropriately on what needs to be done in the case of transaction failure* Grant and revoke permissions to and from other users and public users from the databaseSubmission: Your submission will be a single WORD file with the query and result screenshot from Oracle SQL developerMake sure every SQL statement terminates with a semicolon.* You will use following data to complete the given tasks:* SET TRANSACTION READ WRITE starts a new transaction. * COMMIT commits the current transaction, making its changes permanent. * SAVEPOINT <name>  sets a pointer to a location that can be rolled back to.* ROLLBACK rolls back the current transaction, canceling its changes.* SET autocommit disables or enables the default autocommit mode for the current session.Tasks:It is very important that these tasks/questions be performed in the order presented here for maximum learning.PART A - Transactions1. Execute the following commands.       SET AUTCOMMIT OFF;	SET TRANSACTION READ WRITE;      Using SQL, create an empty table, that is the same as the RETAILCUSTOMERS table, and name it       newCustomers.                        SET AUTOCOMMIT OFF;      SET TRANSACTION READ WRITE;            CREATE TABLE newCustomers(          CUSTOMERNUMBER number(38,0) NOT NULL PRIMARY KEY,          CUSTOMERNAME varchar2(50) NOT NULL,          CONTACTLASTNAME varchar2(50) NOT NULL,          CONTACTFIRSTNAME varchar2(50) NOT NULL,          PHONE varchar2(50) NOT NULL,          ADDRESSLINE1 varchar2(50) NOT NULL,          ADDRESSLINE2 varchar2(50),          CITY varchar2(50) NOT NULL,          PROVINCE varchar2(50),          POSTALCODE varchar2(15),          COUNTRY varchar2(50) NOT NULL,          SALESREPEMPLOYEENUMBER number(38,0) REFERENCES RETAILEMPLOYEES (EMPLOYEENUMBER),          CREDITLIMIT number(10,2)      );      2. Write an INSERT statement to populate the newCustomers table with the rows of the sample data. (Write a single INSERT statement to insert all the rows, combine firstname and last name to get full name during insert) customerNumbercontactLastNamecontactFirstNamePhoneaddressLine1citycountry100PatelRalph223335555510 SenecaWayParisFrance101DenisBetty3344455555110 SenecaWayChicagoUSA102BiriBen4455544554413000 SenecaWayTorontoCanada103NewmanChad6677733223312 SenecaWayMexico cityMexico104RopeburnAudrey778881121215000 SenecaWayHavanaCuba105LucyPreston4555551111112 SenecaWayCharlotteUSAINSERT ALLINTO NEWCUSTOMERS VALUES (100,'Patel Ralph','Patel','Ralph',2233355555,'10 SenecaWay','Paris','France')INTO NEWCUSTOMERS VALUES (101,'Denis Betty','Denis','Betty',3344455555,'110 SenecaWay','Chicago','USA')INTO NEWCUSTOMERS VALUES (102,'Biri Ben','Biri','Ben',44555445544,'13000 SenecaWay','Toronto','Canada')INTO NEWCUSTOMERS VALUES (103,'Newnham Chad','Newnham','Chad',66777332233,'12 SenecaWay','Mexico city','Mexico')INTO NEWCUSTOMERS VALUES (104,'Ropeburn Audrey','Ropeburn','Audrey',7788811212,'15000 SenecaWay','Havana','Cuba')INTO NEWCUSTOMERS VALUES (105,'Lucy Preston','Lucy','Preston',45555511111,'12 SenecaWay','Charlotte','USA')SELECT * FROM DUAL;3. Create a query that shows all the inserted rows from the newCustomers table. How many rows are selected?SELECT * FROM newcustomers;==> In total, six rows were selected.4. Execute the rollback command. Display all rows and columns from the newCustomers table. How many rows are selected?SELECT * FROM newcustomers;ROLLBACK;SELECT * FROM newcustomers;==> No, rows were selected, after executing the rollback command.5. Repeat Question 2. Make the insertion permanent to the table newCustomers. Display all rows and columns from the newCustomers table. How many rows are selected?SET AUTOCOMMIT OFF;SET TRANSACTION READ WRITE;COMMIT;INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (100,'Patel Ralph','Patel','Ralph',2233355555,'10 SenecaWay','Paris','France');INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (101,'Denis Betty','Denis','Betty',3344455555,'110 SenecaWay','Chicago','USA');INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (102,'Biri Ben','Biri','Ben',44555445544,'13000 SenecaWay','Toronto','Canada');INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (103,'Newnham Chad','Newnham','Chad',66777332233,'12 SenecaWay','Mexico city','Mexico');INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (104,'Ropeburn Audrey','Ropeburn','Audrey',7788811212,'15000 SenecaWay','Havana','Cuba');INSERT INTO NEWCUSTOMERS(CUSTOMERNUMBER,CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME,PHONE,ADDRESSLINE1,CITY,COUNTRY)VALUES (105,'Lucy Preston','Lucy','Preston',45555511111,'12 SenecaWay','Charlotte','USA');COMMIT;SELECT * FROM NEWCUSTOMERS;ROLLBACK;SELECT * FROM NEWCUSTOMERS;==> All the six rows were selected, even after executing rollback.6. Write an update statement to update the value of column addressLine1 to ÔunknownÕ for all the customers in the newCustomers table.UPDATE NEWCUSTOMERSSET ADDRESSLINE1 = 'unknown';7. Make your changes permanent.SET AUTOCOMMIT OFF;SET TRANSACTION READ WRITE;UPDATE NEWCUSTOMERSSET ADDRESSLINE1 = 'unknown';COMMIT;SELECT * FROM NEWCUSTOMERS;8. Execute the rollback command. a. Display all customers from the newCustomers table whose address is ÔunknownÕ. How many rows are still updated?SET AUTOCOMMIT OFF;SET TRANSACTION READ WRITE;UPDATE NEWCUSTOMERSSET ADDRESSLINE1 = 'unknown';COMMIT;SELECT * FROM NEWCUSTOMERS;ROLLBACK;SELECT * FROM NEWCUSTOMERS;b. Was the rollback command effective?==> No, it was not effective, at all.c. What was the difference between the result of the rollback execution from Question 6 and the result of the rollback execution of this task?==> In the previous question, we used rollback before permanently saving our results of the previous query, thatÕs why in that case, rollback statement was effective, but now we have used commit after our update query, so it saves the result of the change being made in the table. Hence, in this task, rollback was not effective, at all.9. Begin a new transaction and then create a statement to delete the customers from the newCustomers tableSET AUTOCOMMIT OFF;SET TRANSACTION READ WRITE;COMMIT;DELETE FROM NEWCUSTOMERS;10. Perform a rollback to undo the deletion of the customersSET AUTOCOMMIT OFF;SET TRANSACTION READ WRITE;COMMIT;DELETE FROM NEWCUSTOMERS;ROLLBACK;SELECT * FROM NEWCUSTOMERS;a. How many customers are now in the newCustomers table?==> There are six customers, in the table, as expected before.b. Was the rollback effective and why?Yes, it was effective, since we forced a new transaction and after executing the delete statement for deleting the columns of newCustomers, we did not execute commit statement to save the changes and hence, the rollback was effective here.11. Begin a new transaction and rerun the data insertion from Question 2 (copy the code down to Question 11 and run it)COMMIT;INSERT ALLINTO NEWCUSTOMERS VALUES (100,'Patel Ralph','Patel','Ralph',2233355555,'10 SenecaWay','Paris','France')INTO NEWCUSTOMERS VALUES (101,'Denis Betty','Denis','Betty',3344455555,'110 SenecaWay','Chicago','USA')INTO NEWCUSTOMERS VALUES (102,'Biri Ben','Biri','Ben',44555445544,'13000 SenecaWay','Toronto','Canada')INTO NEWCUSTOMERS VALUES (103,'Newnham Chad','Newnham','Chad',66777332233,'12 SenecaWay','Mexico city','Mexico')INTO NEWCUSTOMERS VALUES (104,'Ropeburn Audrey','Ropeburn','Audrey',7788811212,'15000 SenecaWay','Havana','Cuba')INTO NEWCUSTOMERS VALUES (105,'Lucy Preston','Lucy','Preston',45555511111,'12 SenecaWay','Charlotte','USA')SELECT * FROM DUAL;12. Set a Savepoint, called insertion, after inserting the dataCOMMIT;INSERT ALLINTO NEWCUSTOMERS VALUES (100,'Patel Ralph','Patel','Ralph',2233355555,'10 SenecaWay','Paris','France')INTO NEWCUSTOMERS VALUES (101,'Denis Betty','Denis','Betty',3344455555,'110 SenecaWay','Chicago','USA')INTO NEWCUSTOMERS VALUES (102,'Biri Ben','Biri','Ben',44555445544,'13000 SenecaWay','Toronto','Canada')INTO NEWCUSTOMERS VALUES (103,'Newnham Chad','Newnham','Chad',66777332233,'12 SenecaWay','Mexico city','Mexico')INTO NEWCUSTOMERS VALUES (104,'Ropeburn Audrey','Ropeburn','Audrey',7788811212,'15000 SenecaWay','Havana','Cuba')INTO NEWCUSTOMERS VALUES (105,'Lucy Preston','Lucy','Preston',45555511111,'12 SenecaWay','Charlotte','USA')SELECT * FROM DUAL;SAVEPOINT insertion;13. Rerun the update statement from Question 6 and run a query to view the data (copy the code down and run it again)UPDATE NEWCUSTOMERSSET ADDRESSLINE1 = 'unknown';SELECT * FROM NEWCUSTOMERS;14. Rollback the transaction to the Savepoint created in Question 12 above and run a query to view the data.What does the data look like (i.e. describe what happened?SAVEPOINT insertion;UPDATE NEWCUSTOMERSSET ADDRESSLINE1 = 'unknown';SELECT * FROM NEWCUSTOMERS;ROLLBACK TO insertion;SELECT * FROM NEWCUSTOMERS;==> Here, the data look like what we have inserted as the actual data with the insert statement, Because we have executed rollback insertion statement, which undo the modification we did for updating the row of AddressLine1 to ÔunknownÕ.15. Use the rollback statement and again view the data.  Describe what the results look like and what happened.ROLLBACK;SELECT * FROM NEWCUSTOMERS;Part B - Permissions16. Write a statement that denies all access to the newCustomers table for all public usersROLLBACK;SELECT * FROM NEWCUSTOMERS;17. Write a statement that allows a person  ÔRGNANAOLIVUÕ read only access to the newCustomers table.GRANT SELECT ON NEWCUSTOMERSTO RGNANAOLIVU;18. Write a statement that allows the same person  ÔRGNANAOLIVUÕ to modify (insert, update and delete) the data of the newCustomers table.GRANT INSERT,UPDATE,DELETE ON NEWCUSTOMERSTO RGNANAOLIVU;19. Write a statement the denies all access to the newCustomers table for the same person  ÔRGNANAOLIVUÕ.REVOKE ALL ON NEWCUSTOMERSFROM RGNANAOLIVU;Part C Ð Clean up20. Write statements to permanently remove the view and table created for this labDROP TABLE NEWCUSTOMERS;DBS211 Ð Introduction to Database Systems		SUMMER 2022